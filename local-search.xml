<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>初探vue(1)</title>
    <link href="/blog/2020/05/30/%E5%88%9D%E6%8E%A2vue/"/>
    <url>/blog/2020/05/30/%E5%88%9D%E6%8E%A2vue/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-学习笔记"><a href="#Vue-js-学习笔记" class="headerlink" title="Vue.js  学习笔记"></a>Vue.js  学习笔记</h1><h3 id="什么是渐进式？"><a href="#什么是渐进式？" class="headerlink" title="什么是渐进式？"></a>什么是渐进式？</h3><p>Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的<strong>渐进式框架</strong>。渐进式也就是“Progressive”，按照我的理解，渐进就是一步一步的意思，大概的意思应该是框架你可以只用到一部分，而不用把所有的东西都用上。 </p><p>vue采用的是分离的状态：</p><p><img src="https://pic1.zhimg.com/80/v2-cc3ec77bdca6da1a7e276918d894490b_720w.jpg" srcset="/blog/img/loading.gif" alt="img" style="zoom: 80%;" /></p><p>这也就是说，当你的项目比较小比较简单的时候，我们就可以只用核心部分，也就是图中的“Declarative  Rendering”（声明式渲染），跟“Component System ”（组件系统），而后按需加载加载其他部分</p><p>这就是我对渐进式框架的理解，优点在于降低了学习复杂度，也让框架变得比较轻。</p><h3 id="vue的两个核心"><a href="#vue的两个核心" class="headerlink" title="vue的两个核心"></a>vue的两个核心</h3><h4 id="1、响应式的数据绑定"><a href="#1、响应式的数据绑定" class="headerlink" title="1、响应式的数据绑定"></a>1、响应式的数据绑定</h4><p><strong>Vue 的核心库只关注视图层</strong>    以往的数据交互，是我们通过Ajax向服务器请求数据，然后我们通过获取操作DOM节点来改变视图，每次交互数据改变时，又要重新操作，而Vue让我们减去了操作DOM的过程，当数据发生改变时，自动帮我们更新视图。Vue还会双向绑定数据，当你在视图层操作发生改变时，监听变化从而改变其数据内容。（利用了MVVM的思想）</p><p><img src="https://s1.ax1x.com/2020/05/30/tQTgDH.gif" srcset="/blog/img/loading.gif" alt="tQTgDH.gif" style="zoom:67%;" /></p><h4 id="2、视图组件化"><a href="#2、视图组件化" class="headerlink" title="2、视图组件化"></a>2、视图组件化</h4><p><img src="https://cn.vuejs.org/images/components.png" srcset="/blog/img/loading.gif" alt="Component Tree" style="zoom: 50%;" /></p><p>这是一个组件树，通过多个小组件拼接，组成一个大组件，把组件封装起来就形成一个页面。而改变一个小组件，就不会影响其他组件页面。像堆积木一样，互相引用从而组装起来。组件拿出来别的页面也可以使用，实现组件的重复使用，有利于维护。</p><h3 id="开始使用vue"><a href="#开始使用vue" class="headerlink" title="开始使用vue"></a>开始使用vue</h3><h4 id="1、创建实例：-需要已安装好vue-js，并将vue-js引入"><a href="#1、创建实例：-需要已安装好vue-js，并将vue-js引入" class="headerlink" title="1、创建实例：(需要已安装好vue.js，并将vue.js引入)"></a>1、创建实例：(需要已安装好vue.js，并将vue.js引入)</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data: &#123;<span class="actionscript">            name: <span class="hljs-string">"路飞"</span></span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>Vue是<strong>响应式</strong>的，当你在浏览器后台修改<strong>vm.name</strong>的值时，你会看到页面会相对应更新</p><h4 id="2、绑定元素属性-attribute"><a href="#2、绑定元素属性-attribute" class="headerlink" title="2、绑定元素属性(attribute)"></a>2、绑定元素属性(attribute)</h4><h6 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h6><pre><code class="hljs v-bind```:attribute">&#96;&#96;&#96;html&lt;div id&#x3D;&#39;demo&#39;&gt;    &lt;span v-bind:id&#x3D;&#39;id&#39; v-bind:class&#x3D;&#39;[myClass1,myClass2]&#39;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&lt;script&gt;    var vm &#x3D; new Vue(&#123;        el: &#39;#demo&#39;,   &#x2F;&#x2F;id选择        data: &#123;            name: &quot;路飞&quot;,            id:&quot;only&quot;,            myClass1:&quot;demo1&quot;,            myClass2:&quot;demo2&quot;        &#125;    &#125;)&lt;&#x2F;script&gt;</code></pre><p><img src="https://s1.ax1x.com/2020/05/30/tQxZi4.png" srcset="/blog/img/loading.gif" alt="tQxZi4.png" style="zoom: 80%;" /></p><p>还可以给属性添加上布尔值，当true的时候，添加上该属性值，当false的时候，该属性值消失。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">'&#123;demo1:ifClass&#125;'</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data: &#123;<span class="actionscript">            name: <span class="hljs-string">"路飞"</span>,</span><span class="actionscript">            ifClass:<span class="hljs-literal">true</span>  <span class="hljs-comment">//当false的时候，该属性值消失</span></span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h6 id="v-if-跟-v-show"><a href="#v-if-跟-v-show" class="headerlink" title="v-if 跟 v-show"></a>v-if 跟 v-show</h6><pre><code class="hljs v-if```是用来控制切换元素的显示消失功能（false时直接删除DOM节点）">&#96;&#96;&#96;html&lt;div id&#x3D;&#39;demo&#39;&gt;    &lt;span v-if&#x3D;&quot;ifseen&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&lt;script&gt;    var vm &#x3D; new Vue(&#123;        el: &#39;#demo&#39;,   &#x2F;&#x2F;id选择        data: &#123;            name: &quot;路飞&quot;,            ifseen:true  &#x2F;&#x2F;false的时候，直接删除DOM节点        &#125;    &#125;)&lt;&#x2F;script&gt;</code></pre><pre><code class="hljs v-show```也是用来控制切换元素的显示消失功能，与v-if不同的是，v-show是通过设置属性">&#96;&#96;&#96;html&lt;div id&#x3D;&#39;demo&#39;&gt;    &lt;span v-show&#x3D;&quot;ifseen&quot;&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&lt;script&gt;    var vm &#x3D; new Vue(&#123;        el: &#39;#demo&#39;,   &#x2F;&#x2F;id选择        data: &#123;            name: &quot;路飞&quot;,            ifseen:true  &#x2F;&#x2F;false的时候，设置display:none;        &#125;    &#125;)&lt;&#x2F;script&gt;</code></pre><p>如果频繁需要显示消失功能，那么就采用<code>v-show</code>的方式，而<code>v-if</code>是直接通过添加删除子节点的方法，会进行重排重绘，耗费性能</p><p>如果不频繁的话，使用<code>v-if</code>更好，因为false时没有DOM节点，初始化时不用加载</p><h6 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h6><pre><code class="hljs v-for```是用来绑定数组中一堆数据来渲染一个列表，可与```<ul><li></li></ul>```标签配合使用">&#96;&#96;&#96;html&lt;ul id&#x3D;&quot;only&quot;&gt;    &lt;li v-for &#x3D;&quot;item to list&quot;&gt;&#123;&#123;item.fruit&#125;&#125;&lt;&#x2F;li&gt;  &lt;!--item遍历数组list的值--&gt;&lt;&#x2F;ul&gt;&lt;script&gt;    var vm &#x3D; new Vue(&#123;        el: &#39;#only&#39;,   &#x2F;&#x2F;id选择        data: &#123;            list:[&#123;fruit:&quot;苹果&quot;&#125;,&#123;fruit:&quot;香蕉&quot;&#125;,&#123;fruit:&quot;橙子&quot;&#125;]        &#125;    &#125;)&lt;&#x2F;script&gt;</code></pre><h6 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h6><pre><code class="hljs v-on```:event">&#96;&#96;&#96;v-on:click</code></pre><p><img src="https://s1.ax1x.com/2020/05/31/tlFJxg.gif" srcset="/blog/img/loading.gif" alt="tlFJxg.gif"><br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span> = <span class="hljs-string">"cli"</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data:&#123;<span class="actionscript">        name:<span class="hljs-string">'路飞'</span></span>    &#125;,<span class="actionscript">        methods:&#123;                        <span class="hljs-comment">//创建methods对象，定义触发事件函数</span></span><span class="actionscript">            cli:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;</span><span class="actionscript">                vm.name = <span class="hljs-string">'鸣人'</span></span>            &#125;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></p><pre><code class="hljs v-on:keyup```（效果图为上文第一张动态图）">&#96;&#96;&#96;v-on:keyup.enter&#96;&#96;&#96;表示只有按起回车键，才会执行事件&#96;&#96;&#96;v-model&#96;&#96;&#96;用来显示input输入框中的初始值&#96;&#96;&#96;html&lt;div id&#x3D;&#39;demo&#39;&gt;    &lt;span&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;span&gt;    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot; v-on:keyup&#x3D;&quot;keyup&quot; style&#x3D;&quot;height:30px&quot;&gt;&lt;&#x2F;div&gt;&lt;script&gt;    var vm &#x3D; new Vue(&#123;        el: &#39;#demo&#39;,        data: &#123;            message: &quot;Hello,world!&quot;        &#125;,        methods:&#123;            keyup:function()&#123;                vm.message &#x3D; this.value,                console.log(this.value)            &#125;        &#125;    &#125;)&lt;&#x2F;script&gt;</code></pre><h4 id="3、生命周期"><a href="#3、生命周期" class="headerlink" title="3、生命周期"></a>3、生命周期</h4><h6 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h6><p>生命周期钩子的函数，是用于不同阶段添加自己的代码的机会</p><p>挂载：我理解的挂载，是通过new Vue()语句创建的对象后，没有执行没有渲染，而是放到HTML文档中，这个过程就是挂载，我也找不到权威的解释，这样一来可能解释得通，通过Ajax请求出来数据后，把数据插进去，再一起挂载到HTML文档中执行渲染，此时DOM元素被vm.$el替换</p><div class="table-container"><table><thead><tr><th>生命周期钩子函数</th><th>作用时间顺序</th></tr></thead><tbody><tr><td>beforeCreate : function(…){…}</td><td>实例初始化之后执行的函数，即整个页面创建之前执行</td></tr><tr><td>created : function(…){…}</td><td>实例初始化数据（data数据绑定，v-on事件绑定）之后，调用的函数，此时挂载阶段还没开始 <br>一般函数内容为Ajax请求</td></tr><tr><td>beforeMount : function(…){…}</td><td>在挂载开始之前被调用，相关渲染函数首次被调用</td></tr><tr><td>Mounted : function(…){…}</td><td>挂载成功后被调用<br>DOM元素被vm.$el替换<br>实例激活，监听beforeUpdate跟update</td></tr><tr><td>beforeUpdate : function(…){…}</td><td>数据更新时调用</td></tr><tr><td>update : function(…){…}</td><td>DOM已经更新，组件更新完毕后调用</td></tr></tbody></table></div><p>引用官方文档生命周期图示：</p><p><img src="https://cn.vuejs.org/images/lifecycle.png" srcset="/blog/img/loading.gif" alt="Vue å®ä¾çå½å¨æ" style="zoom: 50%;" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>vue框架学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鼠标点击冒泡</title>
    <link href="/blog/2020/05/29/demo1/"/>
    <url>/blog/2020/05/29/demo1/</url>
    
    <content type="html"><![CDATA[<h1 id="鼠标点击冒泡特效小功能"><a href="#鼠标点击冒泡特效小功能" class="headerlink" title="鼠标点击冒泡特效小功能"></a>鼠标点击冒泡特效小功能</h1><h5 id="功能：初步实现当鼠标左键点击的时候，会产生冒泡效果。"><a href="#功能：初步实现当鼠标左键点击的时候，会产生冒泡效果。" class="headerlink" title="功能：初步实现当鼠标左键点击的时候，会产生冒泡效果。"></a>功能：初步实现当鼠标左键点击的时候，会产生冒泡效果。</h5><p>利用原生js点击事件，动态生成DOM节点，通过计时器设置图形冒泡时间。代码如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ohtml = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">"html"</span>)[<span class="hljs-number">0</span>]; <span class="hljs-comment">//获取节点</span><span class="hljs-keyword">var</span> obody = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'body'</span>)[<span class="hljs-number">0</span>];<span class="hljs-comment">//设置点击事件</span>ohtml.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;    <span class="hljs-keyword">var</span> x = e.pageX;    <span class="hljs-keyword">var</span> y = e.pageY;   <span class="hljs-comment">//获取鼠标的点击位置</span>    <span class="hljs-keyword">var</span> ele = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"div"</span>); <span class="hljs-comment">//每当点击的时候动态生成dom节点</span>    <span class="hljs-comment">//设置样式</span>    ele.style.color = <span class="hljs-string">'red'</span>;    ele.style.zIndex = <span class="hljs-string">'999'</span>;    ele.style.position = <span class="hljs-string">"absolute"</span>    ele.style.userSelect = <span class="hljs-string">'none'</span>; <span class="hljs-comment">//设置不可选中</span>    ele.style.fontSize = <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span> + <span class="hljs-number">25</span> + <span class="hljs-string">"px"</span>;  <span class="hljs-comment">//随机设置文字图形的大小</span>    <span class="hljs-comment">//设置图标出现的位置</span>    ele.style.left = (x<span class="hljs-number">-10</span>) + <span class="hljs-string">'px'</span>;    ele.style.top = (y<span class="hljs-number">-20</span>) + <span class="hljs-string">'px'</span>;    <span class="hljs-comment">//将DOM节点插入body中</span>    obody.appendChild(ele);    <span class="hljs-comment">//添加图形进去</span>    ele.innerText = <span class="hljs-string">"♥"</span>    <span class="hljs-comment">//设置定时器，计算冒泡消失时间</span>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;    clearInterval(timer);    <span class="hljs-keyword">var</span> timer = setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        num++;        ele.style.top = y <span class="hljs-number">-20</span> - num + <span class="hljs-string">'px'</span>; <span class="hljs-comment">//设置冒泡高度</span>        ele.style.opacity = (<span class="hljs-number">150</span>-num)/<span class="hljs-number">120</span>; <span class="hljs-comment">//设置透明度渐变效果</span><span class="hljs-keyword">if</span> (num == <span class="hljs-number">150</span>) &#123;clearInterval(timer);  <span class="hljs-comment">//清空定时器</span>obody.removeChild(ele);  <span class="hljs-comment">//删除节点</span>        &#125;    &#125;,<span class="hljs-number">8</span>);<span class="hljs-comment">//每8毫秒 num加1，则冒泡出现的时间为1.2秒</span>&#125;</code></pre><h4 id="效果图如图所示："><a href="#效果图如图所示：" class="headerlink" title="效果图如图所示："></a>效果图如图所示：</h4><p><img src="https://s1.ax1x.com/2020/05/30/tKyYee.gif" srcset="/blog/img/loading.gif" alt="tKyYee.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>即想即做的小组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记总结 --html篇</title>
    <link href="/blog/2020/05/29/second/"/>
    <url>/blog/2020/05/29/second/</url>
    
    <content type="html"><![CDATA[<h1 id="学习前端编程，首先从HTML开始"><a href="#学习前端编程，首先从HTML开始" class="headerlink" title="学习前端编程，首先从HTML开始"></a>学习前端编程，首先从HTML开始</h1><hr><h2 id="HTML入门"><a href="#HTML入门" class="headerlink" title="HTML入门"></a>HTML入门</h2><p>html是一种超文本标记语言（HyperText Markup Language），用于创建网页的标记语言。</p><h3 id="HTML标签："><a href="#HTML标签：" class="headerlink" title="HTML标签："></a>HTML标签：</h3><h5 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>   <span class="hljs-comment">&lt;!--根标签，lang是属性名, ""引号里面为属性值(告诉搜索引擎网站的内容)--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-comment">&lt;!--设置字符集--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的博客<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-comment">&lt;!--浏览器窗口的标题--&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    Hello,world!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-comment">&lt;!--主体内容，展示给用户的--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><h2 id="其他写在body里面的处理文本的标签："><a href="#其他写在body里面的处理文本的标签：" class="headerlink" title="其他写在body里面的处理文本的标签："></a>其他写在body里面的处理文本的标签：</h2></blockquote><p><strong>1、<code>&lt;p&gt;&lt;/p&gt;</code></strong>  段落成段展示:<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>燕子去了，有再来的时候；杨柳枯了，有再青的时候；桃花谢了,有再开的时候。但是，聪明的，你告诉我，我们的日子为什么一去不复返呢？——是有人偷了他们罢：那是谁？又藏在何处呢？是他们自己逃走了罢——如今又到了哪里呢？<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我不知道他们给了我多少日子，但我的手确乎是渐渐空虚了。在默默里算着，八千多日子已经从我手中溜去，像针尖上一滴水滴在大海里，我的日子滴在时间的流里，没有声音，也没有影子。我不禁头涔涔而泪潸潸了。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><br><strong>2、<code>&lt;h1&gt;&lt;h2&gt;&lt;h3&gt;&lt;h4&gt;&lt;h5&gt;&lt;h6&gt;</code></strong>  标题标签，<code>&lt;h1&gt;</code>     标签最小，<code>&lt;h6&gt;</code>  标签字体最小   </p><p><strong>3、<code>&lt;b&gt;&lt;/b&gt;</code></strong>   字体粗体    </p><p><strong>4、<code>&lt;i&gt;&lt;/i&gt;</code></strong>   字体斜体  </p><p><strong>5、<code>&lt;sup&gt;&lt;/sup&gt;</code></strong> 上标字符 —&gt; <code>E = mc&lt;sup&gt;2&lt;/sup&gt;</code> —&gt;  <script type="math/tex">E = mc^2</script>    </p><p><strong>6、<code>&lt;sub&gt;&lt;/sub&gt;</code></strong>  下标字符   </p><p><strong>7、<code>&lt;br /&gt;</code></strong> 换行标签  </p><p><strong>8、<code>&lt;hr/&gt;</code></strong> 插入一条水平线  —&gt;(如下所示)   </p><hr><p><strong>9、<code>&lt;strong&gt;&lt;/strong&gt;</code></strong> 粗体强调         </p><p><strong>10、<code>&lt;em&gt;&lt;/em&gt;</code></strong> 斜体    </p><p><strong>11、<code>&lt;del&gt;&lt;/del&gt;</code></strong> 中划线标签 —&gt;  <del>￥100</del></p><h2 id="使用编辑器"><a href="#使用编辑器" class="headerlink" title="使用编辑器"></a>使用编辑器</h2><p>建议使用VS code,创建html文件，用编辑器打开，用（ ! 回车） 可以一键生成基本页面标签内容。编辑后，用浏览器打开html。</p><h2 id="重要且常用的标签"><a href="#重要且常用的标签" class="headerlink" title="重要且常用的标签"></a>重要且常用的标签</h2><h3 id="1、ul-li无序列表"><a href="#1、ul-li无序列表" class="headerlink" title="1、ul  li无序列表"></a>1、ul  li无序列表</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-comment">&lt;!--  经常利用CSS中设置list-style : none;将无序列表前面的小黑点去掉,    </span><span class="hljs-comment">或通过其他属性值设置前面样式--&gt;</span></code></pre><h3 id="2、img图片标签"><a href="#2、img图片标签" class="headerlink" title="2、img图片标签"></a>2、img图片标签</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">stc</span>=<span class="hljs-string">" "</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">" "</span>  <span class="hljs-attr">title</span>=<span class="hljs-string">" "</span>&gt;</span></code></pre><p>title 全局属性，<code>&lt;element title=&quot;value&quot;&gt;</code> 常与需要信息提示的元素一同使用，当鼠标移到元素上时显示一段提示文本<br>|    属性    |                            值表示                            |<br>|————| ————————————————————————————— |<br>|  src=’  ‘  | 1、网上的url<br/>2、本地的绝对地址  <br/>3、本地的相对地址 |<br>|  alt=’  ‘  |               记述图片，地址错误时展示文字信息               |<br>| title=’  ‘ |            图片提示符，当鼠标移上去时显示图片信息            |</p><h3 id="3、a标签-lt-a-gt-lt-a-gt"><a href="#3、a标签-lt-a-gt-lt-a-gt" class="headerlink" title="3、a标签 &lt;a&gt;&lt;/a&gt;"></a>3、a标签 <code>&lt;a&gt;&lt;/a&gt;</code></h3><p>1、放地址，实现超链接<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">" "</span>  <span class="hljs-attr">target</span>=<span class="hljs-string">"blank"</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><br>2、可做锚点，回到顶部，从目录选择到内容<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo2'</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"position:absolute;top:3500px;width:100px;height:100px;background-color: green;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#demo2"</span>&gt;</span>find demo2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><br>3、打电话发邮件<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"tel:13612345666"</span>&gt;</span>博主电话<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><br>4、协议限定等（发起提示框等功能）</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'https://www.baidu.com'</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">"return confirm('确定跳转?')"</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><div class="table-container"><table><thead><tr><th>属性</th><th>值的描述</th></tr></thead><tbody><tr><td>href=” “（超文本引用）</td><td>属性值可为<strong>链接、电话号码、邮件地址、某个锚点id值 、协议限定符</strong>等</td></tr><tr><td>target=”blank”</td><td>表示另一个标签页面跳转打开网页操作</td></tr></tbody></table></div><h3 id="4、form表单"><a href="#4、form表单" class="headerlink" title="4、form表单"></a>4、form表单</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">" "</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"get/post"</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><p>表格标签，发送数据的功能<br>组成元素：method=”get/post” （数据发送方式)<br>action=”  “(发送给谁/发送上传数据)<br><b>发送数据要一定有两个点： 数据名name跟数据值value</b></p><h4 id="组件："><a href="#组件：" class="headerlink" title="组件："></a>组件：</h4><h5 id="（一）-lt-input-gt-输入框-供用户输入-提交按钮"><a href="#（一）-lt-input-gt-输入框-供用户输入-提交按钮" class="headerlink" title="（一）&lt;input&gt; 输入框;  供用户输入, 提交按钮"></a>（一）<code>&lt;input&gt;</code> 输入框;  供用户输入, 提交按钮</h5><pre><code class="hljs html">Username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> &gt;</span> <span class="hljs-comment">&lt;!--文本框--&gt;</span>Password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span>&gt;</span><span class="hljs-comment">&lt;!--密码框--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'submit'</span> <span class="hljs-attr">name</span>=<span class="hljs-string">'subscribe'</span> <span class="hljs-attr">value</span> = <span class="hljs-string">'Subscribe'</span>&gt;</span> <span class="hljs-comment">&lt;!--提交框--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"fruit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Apple"</span>&gt;</span> I have a apple<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"fruit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Orange"</span> <span class="hljs-attr">checked</span>&gt;</span> I have a Orange</code></pre><div class="table-container"><table><thead><tr><th>属性</th><th>值的描述</th></tr></thead><tbody><tr><td>type（类型）=” “</td><td>1、text(文本框）<br>2、password（密码框）<br>3、summit（提交框）<br/> 4、 radio(单选框)<br/>5、 checkbox(多选框)<br>6、 file(文件上传按钮)</td></tr><tr><td>name=”  “</td><td>数据名</td></tr><tr><td>value=”  “</td><td>数据值</td></tr><tr><td>checked=” checked”<br>属性名属性值一样是，可省略属性值</td><td>已选择框，表示默认选项</td></tr><tr><td>onfocus=” “</td><td>鼠标点击时发生的变化，对焦<br>&lt;<em>input type=”text” onfocus=”</em>SomeJavaScriptCode<em>“&gt;<br>**SomeJavaScriptCode</em> : 规定该事件发生时执行的JavaScript。</td></tr><tr><td>onblur=” “</td><td>鼠标点击外界时发生的变化，失去焦点<br>&lt;<em>input type=”text” onblur=”</em>SomeJavaScriptCode<em>“&gt;<br/>**SomeJavaScriptCode</em> : 规定该事件发生时执行的JavaScript。</td></tr></tbody></table></div><h5 id="（二）-lt-select-gt-lt-select-gt-滑动多选项"><a href="#（二）-lt-select-gt-lt-select-gt-滑动多选项" class="headerlink" title="（二） &lt;select&gt;&lt;/select&gt;  滑动多选项"></a>（二） <code>&lt;select&gt;&lt;/select&gt;</code>  滑动多选项</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1 <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>12 <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>123 <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1234 <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>12345 <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><h5 id="（三）-lt-button-gt-按钮"><a href="#（三）-lt-button-gt-按钮" class="headerlink" title="（三）&lt;button&gt;按钮"></a>（三）<code>&lt;button&gt;</code>按钮</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>这是一个按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></code></pre><h3 id="5、div与span"><a href="#5、div与span" class="headerlink" title="5、div与span"></a>5、div与span</h3><p>div跟span都是没有特性的标签，但是几乎所有元素都会创建div或者span标签，作为一个容器处理。<br>区别：div将文本和元素集中在一个块级元素中，故div标签为一个块级元素标签<br>span标签将文本和元素集中在一个内联元素中，故span标签标签为一个内联元素标签<br><em>ps:<strong>块级元素跟内联元素区别会在CSS文档中介绍</strong></em></p><h2 id="id特性跟class特性"><a href="#id特性跟class特性" class="headerlink" title="id特性跟class特性"></a>id特性跟class特性</h2><p>每个HTML元素都可以附带一个class属性，class属性可以有多个值<br>每个HTML元素也都可以附带一个id属性，id属性有且只能有一个值，表示该元素的唯一标识。<br>两者的作用是为了方便利用css或javascript中选择并且操作标签</p><div class="table-container"><table><thead><tr><th>id属性</th><th>class属性</th></tr></thead><tbody><tr><td>id属性有且只能有一个值，该元素的唯一标识</td><td>class属性可以有多个值</td></tr><tr><td><code>&lt;div id = &quot;only&quot;&gt;</code></td><td><code>&lt;div class = &quot;demo1 demo2&quot;&gt;</code></td></tr></tbody></table></div>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>firstblog</title>
    <link href="/blog/2020/05/28/firstblog/"/>
    <url>/blog/2020/05/28/firstblog/</url>
    
    <content type="html"><![CDATA[<h1 id="Welcome-my-blog"><a href="#Welcome-my-blog" class="headerlink" title="Welcome my blog"></a>Welcome my blog</h1><h2 id="记录一下第一次创建博客，这是深夜凌晨3点，我这就去睡觉了。"><a href="#记录一下第一次创建博客，这是深夜凌晨3点，我这就去睡觉了。" class="headerlink" title="记录一下第一次创建博客，这是深夜凌晨3点，我这就去睡觉了。"></a>记录一下第一次创建博客，这是深夜凌晨3点，我这就去睡觉了。</h2>]]></content>
    
    
    
    <tags>
      
      <tag>随手一记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
