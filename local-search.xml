<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>初探vue(2)</title>
    <link href="/2020/06/02/%E5%88%9D%E6%8E%A2vue-2/"/>
    <url>/2020/06/02/%E5%88%9D%E6%8E%A2vue-2/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-学习笔记"><a href="#Vue-js-学习笔记" class="headerlink" title="Vue.js  学习笔记"></a>Vue.js  学习笔记</h1><h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><p>插值有三种方式：一种是插入文本，第二种是插入插入HTML，第三种是插入属性值</p><h5 id="就插入文本来说："><a href="#就插入文本来说：" class="headerlink" title="就插入文本来说："></a>就插入文本来说：</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data: &#123;<span class="actionscript">            name: <span class="hljs-string">"路飞"</span></span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>这种<strong>双大括号+变量</strong>插入文本写法，叫做“Mustache”语法。</p><p>如果不想让文本内容随着<code>vm.name</code>的变化而改变，可以使用<code>v-once</code>指令，这样不管数据改变时，插入的内容都不会改变</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span> <span class="hljs-attr">v-once</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>但是这种写法仅仅只是插入文本，比如我们想插入标签，于是有了下面写法：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data: &#123;<span class="handlebars"><span class="xml">            name: "<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello,world<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>"</span></span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><img src="https://s1.ax1x.com/2020/06/02/tNXvz8.png" srcset="/img/loading.gif" alt="tNXvz8.png"></p><p>这样的效果显然不是想要的结果，于是第二种方式插入HTML</p><h5 id="插入HTML"><a href="#插入HTML" class="headerlink" title="插入HTML"></a>插入HTML</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">"innerHtml"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data: &#123;            <span class="handlebars"><span class="xml">            innerHtml:"<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hello,world<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>"</span></span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><img src="https://s1.ax1x.com/2020/06/02/tNjvkR.png" srcset="/img/loading.gif" alt="tNjvkR.png"></p><p>这就很像之前学过的，插入文本innerText跟插入HTML用innerHTML方法。</p><p>但是这种方法插入HTML并不建议，可能会导致网站被攻击。所以一般插入用组件化插入即可。</p><p>第三种便是插入属性值，用<code>v-bind</code>绑定属性。</p><h5 id="插入属性值"><a href="#插入属性值" class="headerlink" title="插入属性值"></a>插入属性值</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">'id'</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">'[myClass1,myClass2]'</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data: &#123;<span class="actionscript">            name: <span class="hljs-string">"路飞"</span>,</span><span class="actionscript">            id:<span class="hljs-string">"only"</span>,</span><span class="actionscript">            myClass1:<span class="hljs-string">"demo1"</span>,</span><span class="actionscript">            myClass2:<span class="hljs-string">"demo2"</span></span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><img src="https://s1.ax1x.com/2020/05/30/tQxZi4.png" srcset="/img/loading.gif" alt="tQxZi4.png" style="zoom: 80%;" /></p><p>需要记住的是：一个属性值用引号<code>v-bind:id=&#39;id&#39;</code></p><p>​                            <strong>数组语法：</strong>两个属性值用中括号<code>&quot;[myClass1,myClass2]&quot;</code></p><p>​                            <strong>对象语法</strong>：判断是否是否加入属性值用大括号<code>&quot;{myClass1:isClass, myClass2: hasError}&quot;</code></p><p>​                            <strong>数组结合形式</strong>：<code>&quot;[{myClass1:isClass}, myClass2]&quot;</code></p><h3 id="让属性成为变量"><a href="#让属性成为变量" class="headerlink" title="让属性成为变量"></a>让属性成为变量</h3><p><strong>v-bing:[someAttr] = “value”</strong></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bing:</span>[<span class="hljs-attr">className</span>] = <span class="hljs-string">"value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>需要注意的是，<code>[className]</code>里面的大写字母会被转换成小写，因此，在data对象中，应该写成<code>classname:class</code></p><h3 id="缩写："><a href="#缩写：" class="headerlink" title="缩写："></a>缩写：</h3><p>v-on 可以缩写成@</p><p>v-bind 可以缩写成 :（冒号）</p><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>简单的逻辑，我们可以通过在模板中添加JavaScript表达式，例如</p><p><code>&lt;div id=&#39;demo&#39;&gt;{{name+1234}}&lt;/div&gt;</code></p><p><code>&lt;div id=&#39;demo&#39;&gt;{{name.split('').reverse().join('')}}&lt;/div&gt;</code>    使字符串翻转</p><p>但是在模板中放太多的逻辑运算，会使模板过重且难以维护，因此，对于复杂的逻辑运算，应当使用<strong>计算属性</strong></p><p>基本形式如下：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">           el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>           data: &#123;<span class="actionscript">              firstName: <span class="hljs-string">"蒙奇D"</span>,</span><span class="actionscript">              lastName:<span class="hljs-string">"路飞"</span></span>           &#125;,           computed: &#123;<span class="actionscript">              name: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName                                        </span>                    &#125;           &#125;&#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><img src="https://s1.ax1x.com/2020/06/03/tUpdi9.png" srcset="/img/loading.gif" alt="tUpdi9.png"></p><p>声明computed为一个对象，里面的定义的<strong>变量</strong>name有两个函数，默认只有一个getter函数，但需要的时候可以加上setting，表示当<code>vm.name</code>改变的时候，setter 函数会被调用，有两个函数时，变量name是一个对象形式，并且要声明两个函数，如：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">                el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>                data: &#123;<span class="actionscript">                         firstName: <span class="hljs-string">"蒙奇D"</span>,</span><span class="actionscript">                         lastName: <span class="hljs-string">"路飞"</span></span>               &#125;,                 computed: &#123;                         name: &#123;<span class="actionscript">                                <span class="hljs-keyword">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">                                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">' '</span> + <span class="hljs-keyword">this</span>.lastName</span>                                &#125;,<span class="actionscript">                                <span class="hljs-keyword">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(newValue)</span> </span>&#123;</span><span class="actionscript">                                        <span class="hljs-keyword">var</span> names = newValue.split(<span class="hljs-string">' '</span>)</span><span class="actionscript">                                        <span class="hljs-keyword">this</span>.firstName = names[<span class="hljs-number">0</span>]</span><span class="actionscript">                                        <span class="hljs-keyword">this</span>.lastName = names[names.length - <span class="hljs-number">1</span>]</span>                                &#125;                        &#125;                &#125;        &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><img src="https://s1.ax1x.com/2020/06/03/tUC91I.png" srcset="/img/loading.gif" alt="tUC91I.png"></p><p>这是，当修改<code>vm.name</code>的时候，会调用set函数，将改变的值传进函数体内执行。</p><p><strong>计算属性，可以返回数组！！！可以用来监听属性</strong></p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>vue两大核心，声明式渲染跟组件，组件就是个是可复用的 Vue 实例，小组件合成大组件，堆积木堆起来。</p><p>创建一个组件：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"components-demo"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">Vue.component(<span class="hljs-string">'button-counter'</span>, &#123;</span><span class="actionscript">        data: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">            <span class="hljs-keyword">return</span> &#123;</span>                count: 0            &#125;        &#125;,<span class="handlebars"><span class="xml">        template: '<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"count++"</span>&gt;</span>You clicked me </span><span class="hljs-template-variable">&#123;&#123; count &#125;&#125;</span><span class="xml"> times.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>'</span></span>    &#125;);<span class="actionscript"><span class="hljs-keyword">new</span> Vue(&#123; el: <span class="hljs-string">'#components-demo'</span> &#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p><img src="https://s1.ax1x.com/2020/06/03/tUPlRA.gif" srcset="/img/loading.gif" alt="tUPlRA.gif"></p><p>要注意：</p><div class="table-container"><table><thead><tr><th>1、组件中，data必须是函数形式，并且return出一个对象</th></tr></thead><tbody><tr><td><strong>2、要记得new 一个对象出来，并且，在new对象的同时应该里面应该绑定住DOM，改DOM表示你组件插入的父级</strong></td></tr><tr><td><strong>3、<code>button-counter</code>为自定义的组件名称，选择位置将其插入</strong></td></tr><tr><td><strong>4、template 表示字符串模板，可以解析后插入DOM结构</strong></td></tr></tbody></table></div><h3 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h3><p>用JavaScript 对象形式，间接改变CSS样式</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'only'</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">'styleObject'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#only'</span>,</span>        data: &#123;            styleObject: &#123;<span class="actionscript">                width: <span class="hljs-string">'50px'</span>,</span><span class="actionscript">                height: <span class="hljs-string">'50px'</span>,</span><span class="actionscript">                backgroundColor: <span class="hljs-string">'red'</span></span>            &#125;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><div id='only' style="width:50px;height:50px;background-color:red"></div><p>绑定内联样式一般也结合<strong>计算属性返回数组</strong>相结合</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'only'</span> <span class="hljs-attr">v-bind:style</span>=<span class="hljs-string">'styleObject'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#only'</span>,</span>        data: &#123;            value:20        &#125;,        computed: &#123;<span class="actionscript">            styleObject: <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">                <span class="hljs-keyword">return</span> &#123;</span><span class="actionscript">                    width: <span class="hljs-keyword">this</span>.value + <span class="hljs-number">20</span>+<span class="hljs-string">'px'</span>,</span><span class="actionscript">                    height: <span class="hljs-keyword">this</span>.value+<span class="hljs-number">30</span>+<span class="hljs-string">'px'</span>,</span><span class="actionscript">                    backgroundColor: <span class="hljs-string">'red'</span></span>                &#125;            &#125;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>当然，一般复杂一点的计算，不会像这个这么简单，但是大概大概就是这种形式。</p><p><code>v-bind:style</code>还有个特点，就是会自动侦测并添加相应的浏览器引擎前缀</p>]]></content>
    
    
    
    <tags>
      
      <tag>vue框架学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>所思所想</title>
    <link href="/2020/06/01/%E6%89%80%E6%80%9D%E6%89%80%E6%83%B3/"/>
    <url>/2020/06/01/%E6%89%80%E6%80%9D%E6%89%80%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h4 id="立个flag"><a href="#立个flag" class="headerlink" title="立个flag"></a>立个flag</h4><p>6月1号，突发奇想看到一个某个组件很好玩，就很想去实现，可是有些东西，看着简单，写着写着，发现自己写不出还有好多错误，就一个简单的功能实现，我居然花了两个多小时琢磨，归根结底的原因，一是自己的基础知识还不够牢靠，二是自己写的代码可能实在太少了，三是脑子里根本没有想法去思考要怎么实现，实现这种效果有很多种方法。</p><p>但当写完之后又觉得这东西好幼稚，不过就是这样写，好多东西就是想当然，即使看别人写代码看懂了不一定会写，有想法不一定写得出来，写得出来不一定对，写的对又不一定写得好。唉，路漫漫其修远兮，学习本就是个漫长的过程。</p><p>当然写这些只是给未来的自己看看，尽管会发给朋友看看我写得怎么样，但是<strong>主要还是想体会一下我写的时候当时的想法</strong>。之前都是学完手写笔记，现在想保存笔记上去到网页上，然后忘了就过来翻翻当时怎么想的，说到这，可能几个月几年后回头看看自己写的东西，就会觉得特别幼稚。</p><p>还有一个苦恼的地方，网上说的非科班拿什么跟科班的比，网上的毒总是挺多的。但在我自己的想法，我学化工机械类的，我也没觉得我学的专业知识会比别人厉害。或许有的人，这边说比不上科班的，这边转过头又跟别人说，大学生怎样怎样，整天颓废无能啥都不会，网上总是一些杠精在自己搏斗。在我打算学编程的时候，犹豫太多终归不是什么好事，当然我也是想了特别多，在我看来，大学学的很广泛，广而不精，要精还得自己提炼，于是乎，自己的不自信自然就烟消云散，所以才开始入手当一个最底层的菜鸟。</p><p>在此也立下个flag，<strong>每天学习到的，都写一篇学习笔记</strong>，每天自己写了什么功能的组件就继续发日志，发在博客上的好处，一是归类的很好，自己写后，查也很方便，重要的当时是怎么想的，一目了然。之前手记的笔记，也会慢慢整理后，发上去，也当作自己复习。</p>]]></content>
    
    
    
    <tags>
      
      <tag>所思所想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现打字效果</title>
    <link href="/2020/06/01/%E8%87%AA%E5%8A%A8%E6%89%93%E5%AD%97%E6%95%88%E6%9E%9C/"/>
    <url>/2020/06/01/%E8%87%AA%E5%8A%A8%E6%89%93%E5%AD%97%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>        div &#123;            height: 40px;            width: 400px;            text-align: center;            line-height: 40px;            background-color: black;<span class="css">            <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#fff</span>;</span>        &#125;<span class="css">        <span class="hljs-selector-class">.text</span> &#123;</span>            font-size: 20px;        &#125;<span class="css">        <span class="hljs-selector-class">.cursor</span> &#123;</span><span class="css">            <span class="hljs-selector-tag">display</span>: <span class="hljs-selector-tag">inline-block</span>;   <span class="hljs-comment">/*没有设置inline-block，当字体输入时，光标会被挤兑没了*/</span></span>            opacity: 1;            animation: show 1s linear infinite;        &#125;<span class="css">        <span class="hljs-keyword">@keyframes</span> show &#123;                 <span class="hljs-comment">/* 通过设置透明度的变化，实现光标的闪烁*/</span></span>            50% &#123;                                      opacity: 0;            &#125;        &#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-comment">&lt;!--创建两个span，一个用来显示文字，一个用来显示光标--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'cursor'</span>&gt;</span>_<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">'text'</span>)[<span class="hljs-number">0</span>];</span><span class="javascript">        <span class="hljs-keyword">var</span> cursor = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">'cursor'</span>)[<span class="hljs-number">0</span>];</span><span class="actionscript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span><span class="hljs-params">(string)</span> </span>&#123;</span><span class="javascript">            <span class="hljs-keyword">var</span> textArr = <span class="hljs-built_in">Array</span>.from(string);       </span><span class="actionscript">            <span class="hljs-comment">//将输入的字符串输出为数字，当前textArr=['H','e','l','l','o','w','o','r','l','d','!']</span></span><span class="actionscript">            <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span><span class="actionscript">            len = textArr.length;             <span class="hljs-comment">//获取textArr的长度，为遍历做准备</span></span><span class="actionscript">            timer = setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span>                if (i &lt; len) &#123;<span class="actionscript">                    cursor.style.animationPlayState = <span class="hljs-string">'paused'</span>;    <span class="hljs-comment">//在输入的时候光标不会闪烁</span></span><span class="actionscript">                    text.innerText += textArr[i];        <span class="hljs-comment">//将数组内的内容一个一个添加文本上去</span></span>                    i++                &#125;                if (i &gt;= len) &#123;<span class="actionscript">                    clearInterval(timer);         <span class="hljs-comment">//当遍历完后，清除定时器，这个时候，光标继续闪烁</span></span><span class="actionscript">                    cursor.style.animationPlayState = <span class="hljs-string">'running'</span>;</span>                &#125;            &#125;, 200)        &#125;<span class="actionscript">        setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;</span><span class="actionscript">            print(<span class="hljs-string">'Hello,world !'</span>)</span><span class="actionscript">        &#125;,<span class="hljs-number">2000</span>)   <span class="hljs-comment">//先让光标闪两秒，再打印字体上去</span></span>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://s1.ax1x.com/2020/06/01/tJdJr6.gif" srcset="/img/loading.gif" alt="tJdJr6.gif"></p><p>小结：定时器的使用，遍历数组循环。做完后，在此基础上又有了一些稀奇古怪的想法，如果能像打字一样，先上拼音后上字岂不是很神奇，于是动手3小时，又搞了一份。虽然写得真的很不怎么样，而且又很多种方法可以实现，写得很糙，但也确实实现了想要的效果。   </p><p>基本思路就是有拼音，有字体，那就创建两个数组，一一遍历填上，当第一个拼音数组打印完数组第一个，第一个汉字上场，以此循环，然后判断什么时候打印完即可。但是写的时候就有些卡壳了。慢慢修改成下面的版本。</p><p>对我来说，难就难在循环部分，还有重新递归函数，弄到最后，弄了几个循环，慢慢调出来的，收获比较多的自然是递归函数中，递归再次用到的参数给重新定义一下。</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>        div &#123;            height: 40px;            width: 400px;            text-align: center;            line-height: 40px;            background-color: black;<span class="css">            <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#fff</span>;</span>        &#125;<span class="css">        <span class="hljs-selector-class">.text</span>,</span><span class="css">        <span class="hljs-selector-class">.change</span>&#123;</span>            font-size: 20px;        &#125;<span class="css">        <span class="hljs-selector-class">.cursor</span> &#123;</span>            display: inline-block;            opacity: 1;            animation: show 1s linear infinite;        &#125;<span class="css">        <span class="hljs-keyword">@keyframes</span> show &#123;</span>            50% &#123;                opacity: 0;            &#125;        &#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'change'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>               <span class="hljs-comment">&lt;!-- 汉字的部分 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 拼音的部分 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'cursor'</span>&gt;</span>_<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-comment">&lt;!-- 光标的部分 --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">var</span> text = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">'text'</span>)[<span class="hljs-number">0</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> cursor = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">'cursor'</span>)[<span class="hljs-number">0</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> change = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">'change'</span>)[<span class="hljs-number">0</span>]</span><span class="actionscript">        <span class="hljs-keyword">var</span> pinyin = [<span class="hljs-string">'ni'</span>, <span class="hljs-string">'hao'</span>, <span class="hljs-string">'ya'</span>, <span class="hljs-string">'peng'</span>, <span class="hljs-string">'you'</span>]            <span class="hljs-comment">//写拼音的数组</span></span><span class="actionscript">        <span class="hljs-keyword">var</span> hanzi =[<span class="hljs-string">'你'</span>,<span class="hljs-string">'好'</span>,<span class="hljs-string">'呀'</span>,<span class="hljs-string">'朋'</span>,<span class="hljs-string">'友'</span>]                   <span class="hljs-comment">//写汉字的数组</span></span><span class="actionscript">        <span class="hljs-keyword">var</span> pylen = pinyin.length</span><span class="javascript">        <span class="hljs-keyword">var</span> textArr = <span class="hljs-built_in">Array</span>.from(pinyin[<span class="hljs-number">0</span>]);       <span class="hljs-comment">//由于写拼音的数字，里面是字符串，先把第一个字符串变成数组遍历</span></span><span class="actionscript">        <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span><span class="actionscript">        <span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span>;</span><span class="actionscript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span><span class="hljs-params">(textArr)</span> </span>&#123;</span><span class="actionscript">            timer = setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;</span><span class="actionscript">                cursor.style.animationPlayState = <span class="hljs-string">'paused'</span></span><span class="actionscript">                <span class="hljs-keyword">var</span> len = textArr.length;</span>                if (i &lt;= len) &#123;                                        text.innerHTML += textArr[i];                    i++;<span class="javascript">                    <span class="hljs-built_in">console</span>.log(i)    <span class="hljs-comment">//写完了拼音，别动，我先给你清除掉</span></span>                    if (i &gt; len) &#123;<span class="actionscript">                        clearInterval(timer);  <span class="hljs-comment">//清除定时器，你不能循环了</span></span><span class="actionscript">                        text.innerHTML = <span class="hljs-string">''</span> ;   <span class="hljs-comment">//清空拼音内容</span></span><span class="actionscript">                        change.innerHTML += hanzi[j<span class="hljs-number">-1</span>]    <span class="hljs-comment">//汉字上场</span></span><span class="javascript">                        <span class="hljs-built_in">console</span>.log(j)                                               </span><span class="actionscript">                        cursor.style.animationPlayState = <span class="hljs-string">'running'</span>;  </span><span class="actionscript">                        <span class="hljs-keyword">if</span> (j &lt; pylen) &#123;     <span class="hljs-comment">//遍历完第一组拼音，开始进去第二个拼音，于是我一开始设置的j=1</span></span>                            i =0       <span class="actionscript"><span class="hljs-comment">//递归的时候，利用到的参数记得初始化，例如这个i用来判断的，前面用了i导致在这里i已经不是从0开始，例如这个textArr,都要初始化一下，重新搞个值给他   </span></span><span class="javascript">                            textArr = <span class="hljs-built_in">Array</span>.from(pinyin[j]);</span><span class="actionscript">                            j++             <span class="hljs-comment">//当j超过拼音数组的长度，进不来这个判断，于是在上一个判断里面结束罪恶的一生</span></span><span class="actionscript">                            print(textArr)<span class="hljs-comment">//递归，现在是第二组拼音，再次处理拼音</span></span>                        &#125;                    &#125;                &#125;            &#125;, 200)        &#125;        print(textArr)    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h4 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://s1.ax1x.com/2020/06/01/tJyg6H.gif" srcset="/img/loading.gif" alt="tJyg6H.gif"></p><input placeholder="edit me">]]></content>
    
    
    
    <tags>
      
      <tag>既想即做的小组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初探vue(1)</title>
    <link href="/2020/05/30/%E5%88%9D%E6%8E%A2vue/"/>
    <url>/2020/05/30/%E5%88%9D%E6%8E%A2vue/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-学习笔记"><a href="#Vue-js-学习笔记" class="headerlink" title="Vue.js  学习笔记"></a>Vue.js  学习笔记</h1><h3 id="什么是渐进式？"><a href="#什么是渐进式？" class="headerlink" title="什么是渐进式？"></a>什么是渐进式？</h3><p>Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的<strong>渐进式框架</strong>。渐进式也就是“Progressive”，按照我的理解，渐进就是一步一步的意思，大概的意思应该是框架你可以只用到一部分，而不用把所有的东西都用上。 </p><p>vue采用的是分离的状态：</p><p><img src="https://pic1.zhimg.com/80/v2-cc3ec77bdca6da1a7e276918d894490b_720w.jpg" srcset="/img/loading.gif" alt="img" style="zoom: 80%;" /></p><p>这也就是说，当你的项目比较小比较简单的时候，我们就可以只用核心部分，也就是图中的“Declarative  Rendering”（声明式渲染），跟“Component System ”（组件系统），而后按需加载加载其他部分</p><p>这就是我对渐进式框架的理解，优点在于降低了学习复杂度，也让框架变得比较轻。</p><h3 id="vue的两个核心"><a href="#vue的两个核心" class="headerlink" title="vue的两个核心"></a>vue的两个核心</h3><h4 id="1、响应式的数据绑定"><a href="#1、响应式的数据绑定" class="headerlink" title="1、响应式的数据绑定"></a>1、响应式的数据绑定</h4><p><strong>Vue 的核心库只关注视图层</strong>    以往的数据交互，是我们通过Ajax向服务器请求数据，然后我们通过获取操作DOM节点来改变视图，每次交互数据改变时，又要重新操作，而Vue让我们减去了操作DOM的过程，当数据发生改变时，自动帮我们更新视图。Vue还会双向绑定数据，当你在视图层操作发生改变时，监听变化从而改变其数据内容。（利用了MVVM的思想）</p><p><img src="https://s1.ax1x.com/2020/05/30/tQTgDH.gif" srcset="/img/loading.gif" alt="tQTgDH.gif" style="zoom:67%;" /></p><h4 id="2、视图组件化"><a href="#2、视图组件化" class="headerlink" title="2、视图组件化"></a>2、视图组件化</h4><p><img src="https://cn.vuejs.org/images/components.png" srcset="/img/loading.gif" alt="Component Tree" style="zoom: 50%;" /></p><p>这是一个组件树，通过多个小组件拼接，组成一个大组件，把组件封装起来就形成一个页面。而改变一个小组件，就不会影响其他组件页面。像堆积木一样，互相引用从而组装起来。组件拿出来别的页面也可以使用，实现组件的重复使用，有利于维护。</p><h3 id="开始使用vue"><a href="#开始使用vue" class="headerlink" title="开始使用vue"></a>开始使用vue</h3><h4 id="1、创建实例：-需要已安装好vue-js，并将vue-js引入"><a href="#1、创建实例：-需要已安装好vue-js，并将vue-js引入" class="headerlink" title="1、创建实例：(需要已安装好vue.js，并将vue.js引入)"></a>1、创建实例：(需要已安装好vue.js，并将vue.js引入)</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data: &#123;<span class="actionscript">            name: <span class="hljs-string">"路飞"</span></span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><p>Vue是<strong>响应式</strong>的，当你在浏览器后台修改<strong>vm.name</strong>的值时，你会看到页面会相对应更新</p><h4 id="2、绑定元素属性-attribute"><a href="#2、绑定元素属性-attribute" class="headerlink" title="2、绑定元素属性(attribute)"></a>2、绑定元素属性(attribute)</h4><h6 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h6><p><code>v-bind</code>:attribute  表示给该元素节点的设置上特殊的属性，这样属性值则是一个变量与Vue 实例中保持一致，同样通过修改<strong>vm.myClass</strong>的值可以动态修改标签上Class属性的值<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">'id'</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">'[myClass1,myClass2]'</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data: &#123;<span class="actionscript">            name: <span class="hljs-string">"路飞"</span>,</span><span class="actionscript">            id:<span class="hljs-string">"only"</span>,</span><span class="actionscript">            myClass1:<span class="hljs-string">"demo1"</span>,</span><span class="actionscript">            myClass2:<span class="hljs-string">"demo2"</span></span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></p><p><img src="https://s1.ax1x.com/2020/05/30/tQxZi4.png" srcset="/img/loading.gif" alt="tQxZi4.png" style="zoom: 80%;" /></p><p>还可以给属性添加上布尔值，当true的时候，添加上该属性值，当false的时候，该属性值消失。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">'&#123;demo1:ifClass&#125;'</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data: &#123;<span class="actionscript">            name: <span class="hljs-string">"路飞"</span>,</span><span class="actionscript">            ifClass:<span class="hljs-literal">true</span>  <span class="hljs-comment">//当false的时候，该属性值消失</span></span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h6 id="v-if-跟-v-show"><a href="#v-if-跟-v-show" class="headerlink" title="v-if 跟 v-show"></a>v-if 跟 v-show</h6><p><code>v-if</code>是用来控制切换元素的显示消失功能（false时直接删除DOM节点）<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"ifseen"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data: &#123;<span class="actionscript">            name: <span class="hljs-string">"路飞"</span>,</span><span class="actionscript">            ifseen:<span class="hljs-literal">true</span>  <span class="hljs-comment">//false的时候，直接删除DOM节点</span></span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><br><code>v-show</code>也是用来控制切换元素的显示消失功能，与v-if不同的是，v-show是通过设置属性 display 来控制元素的显示与消失<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"ifseen"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data: &#123;<span class="actionscript">            name: <span class="hljs-string">"路飞"</span>,</span><span class="actionscript">            ifseen:<span class="hljs-literal">true</span>  <span class="hljs-comment">//false的时候，设置display:none;</span></span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></p><p>如果频繁需要显示消失功能，那么就采用<code>v-show</code>的方式，而<code>v-if</code>是直接通过添加删除子节点的方法，会进行重排重绘，耗费性能</p><p>如果不频繁的话，使用<code>v-if</code>更好，因为false时没有DOM节点，初始化时不用加载</p><h6 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h6><p><code>v-for</code>是用来绑定数组中一堆数据来渲染一个列表，可与<code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code>标签配合使用<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"only"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span> =<span class="hljs-string">"item to list"</span>&gt;</span>&#123;&#123;item.fruit&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  <span class="hljs-comment">&lt;!--item遍历数组list的值--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#only'</span>,   <span class="hljs-comment">//id选择</span></span>        data: &#123;<span class="actionscript">            list:[&#123;fruit:<span class="hljs-string">"苹果"</span>&#125;,&#123;fruit:<span class="hljs-string">"香蕉"</span>&#125;,&#123;fruit:<span class="hljs-string">"橙子"</span>&#125;]</span>        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></p><h6 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h6><p><code>v-on</code>:event 是用来添加事件监听的，让用户有交互效果<br><code>v-on:click</code></p><p><img src="https://s1.ax1x.com/2020/05/31/tlFJxg.gif" srcset="/img/loading.gif" alt="tlFJxg.gif"><br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span> = <span class="hljs-string">"cli"</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,   <span class="hljs-comment">//id选择</span></span>        data:&#123;<span class="actionscript">        name:<span class="hljs-string">'路飞'</span></span>    &#125;,<span class="actionscript">        methods:&#123;                        <span class="hljs-comment">//创建methods对象，定义触发事件函数</span></span><span class="actionscript">            cli:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;</span><span class="actionscript">                vm.name = <span class="hljs-string">'鸣人'</span></span>            &#125;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></p><p><code>v-on:keyup</code>（效果图为上文第一张动态图）</p><p><code>v-on:keyup.enter</code>表示只有按起回车键，才会执行事件</p><p><code>v-model</code>用来显示input输入框中的初始值，<code>v-model</code>是双向绑定的，也就是说，当你在输入框写入的时候，<code>vm.value</code>随着输入内容而已经发生了改变.<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo'</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">v-on:keyup</span>=<span class="hljs-string">"keyup"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"height:30px"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">    <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="actionscript">        el: <span class="hljs-string">'#demo'</span>,</span>        data: &#123;<span class="actionscript">            message: <span class="hljs-string">"Hello,world!"</span>,</span><span class="actionscript">            value: <span class="hljs-string">"Hello,world!"</span></span>        &#125;,        methods:&#123;<span class="actionscript">            keyup:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;</span><span class="actionscript">                vm.message = <span class="hljs-keyword">this</span>.value,</span><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.value)</span>            &#125;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></p><h4 id="3、生命周期"><a href="#3、生命周期" class="headerlink" title="3、生命周期"></a>3、生命周期</h4><h6 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h6><p>生命周期钩子的函数，是用于不同阶段添加自己的代码的机会</p><p>挂载：我理解的挂载，是通过new Vue()语句创建的对象后，没有执行没有渲染，而是放到HTML文档中，这个过程就是挂载，我也找不到权威的解释，这样一来可能解释得通，通过Ajax请求出来数据后，把数据插进去，再一起挂载到HTML文档中执行渲染，此时DOM元素被vm.$el替换</p><div class="table-container"><table><thead><tr><th>生命周期钩子函数</th><th>作用时间顺序</th></tr></thead><tbody><tr><td>beforeCreate : function(…){…}</td><td>实例初始化之后执行的函数，即整个页面创建之前执行</td></tr><tr><td>created : function(…){…}</td><td>实例初始化数据（data数据绑定，v-on事件绑定）之后，调用的函数，此时挂载阶段还没开始 <br>一般函数内容为Ajax请求</td></tr><tr><td>beforeMount : function(…){…}</td><td>在挂载开始之前被调用，相关渲染函数首次被调用</td></tr><tr><td>Mounted : function(…){…}</td><td>挂载成功后被调用<br>DOM元素被vm.$el替换<br>实例激活，监听beforeUpdate跟update</td></tr><tr><td>beforeUpdate : function(…){…}</td><td>数据更新时调用</td></tr><tr><td>update : function(…){…}</td><td>DOM已经更新，组件更新完毕后调用</td></tr></tbody></table></div><p>引用官方文档生命周期图示：</p><p><img src="https://cn.vuejs.org/images/lifecycle.png" srcset="/img/loading.gif" alt="Vue å®ä¾çå½å¨æ" style="zoom: 50%;" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>vue框架学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鼠标点击冒泡</title>
    <link href="/2020/05/29/demo1/"/>
    <url>/2020/05/29/demo1/</url>
    
    <content type="html"><![CDATA[<h1 id="鼠标点击冒泡特效小功能"><a href="#鼠标点击冒泡特效小功能" class="headerlink" title="鼠标点击冒泡特效小功能"></a>鼠标点击冒泡特效小功能</h1><h5 id="功能：初步实现当鼠标左键点击的时候，会产生冒泡效果。"><a href="#功能：初步实现当鼠标左键点击的时候，会产生冒泡效果。" class="headerlink" title="功能：初步实现当鼠标左键点击的时候，会产生冒泡效果。"></a>功能：初步实现当鼠标左键点击的时候，会产生冒泡效果。</h5><p>利用原生js点击事件，动态生成DOM节点，通过计时器设置图形冒泡时间。代码如下：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ohtml = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">"html"</span>)[<span class="hljs-number">0</span>]; <span class="hljs-comment">//获取节点</span><span class="hljs-keyword">var</span> obody = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'body'</span>)[<span class="hljs-number">0</span>];<span class="hljs-comment">//设置点击事件</span>ohtml.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;    <span class="hljs-keyword">var</span> x = e.pageX;    <span class="hljs-keyword">var</span> y = e.pageY;   <span class="hljs-comment">//获取鼠标的点击位置</span>    <span class="hljs-keyword">var</span> ele = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"div"</span>); <span class="hljs-comment">//每当点击的时候动态生成dom节点</span>    <span class="hljs-comment">//设置样式</span>    ele.style.color = <span class="hljs-string">'red'</span>;    ele.style.zIndex = <span class="hljs-string">'999'</span>;    ele.style.position = <span class="hljs-string">"absolute"</span>    ele.style.userSelect = <span class="hljs-string">'none'</span>; <span class="hljs-comment">//设置不可选中</span>    ele.style.fontSize = <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span> + <span class="hljs-number">25</span> + <span class="hljs-string">"px"</span>;  <span class="hljs-comment">//随机设置文字图形的大小</span>    <span class="hljs-comment">//设置图标出现的位置</span>    ele.style.left = (x<span class="hljs-number">-10</span>) + <span class="hljs-string">'px'</span>;    ele.style.top = (y<span class="hljs-number">-20</span>) + <span class="hljs-string">'px'</span>;    <span class="hljs-comment">//将DOM节点插入body中</span>    obody.appendChild(ele);    <span class="hljs-comment">//添加图形进去</span>    ele.innerText = <span class="hljs-string">"♥"</span>    <span class="hljs-comment">//设置定时器，计算冒泡消失时间</span>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;    clearInterval(timer);    <span class="hljs-keyword">var</span> timer = setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        num++;        ele.style.top = y <span class="hljs-number">-20</span> - num + <span class="hljs-string">'px'</span>; <span class="hljs-comment">//设置冒泡高度</span>        ele.style.opacity = (<span class="hljs-number">150</span>-num)/<span class="hljs-number">120</span>; <span class="hljs-comment">//设置透明度渐变效果</span><span class="hljs-keyword">if</span> (num == <span class="hljs-number">150</span>) &#123;clearInterval(timer);  <span class="hljs-comment">//清空定时器</span>obody.removeChild(ele);  <span class="hljs-comment">//删除节点</span>        &#125;    &#125;,<span class="hljs-number">8</span>);<span class="hljs-comment">//每8毫秒 num加1，则冒泡出现的时间为1.2秒</span>&#125;</code></pre><h4 id="效果图如图所示："><a href="#效果图如图所示：" class="headerlink" title="效果图如图所示："></a>效果图如图所示：</h4><p><img src="https://s1.ax1x.com/2020/05/30/tKyYee.gif" srcset="/img/loading.gif" alt="tKyYee.gif"></p>]]></content>
    
    
    
    <tags>
      
      <tag>即想即做的小组件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记总结 --html篇</title>
    <link href="/2020/05/29/second/"/>
    <url>/2020/05/29/second/</url>
    
    <content type="html"><![CDATA[<h1 id="学习前端编程，首先从HTML开始"><a href="#学习前端编程，首先从HTML开始" class="headerlink" title="学习前端编程，首先从HTML开始"></a>学习前端编程，首先从HTML开始</h1><hr><h2 id="HTML入门"><a href="#HTML入门" class="headerlink" title="HTML入门"></a>HTML入门</h2><p>html是一种超文本标记语言（HyperText Markup Language），用于创建网页的标记语言。</p><h3 id="HTML标签："><a href="#HTML标签：" class="headerlink" title="HTML标签："></a>HTML标签：</h3><h5 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>   <span class="hljs-comment">&lt;!--根标签，lang是属性名, ""引号里面为属性值(告诉搜索引擎网站的内容)--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>  <span class="hljs-comment">&lt;!--设置字符集--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的博客<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-comment">&lt;!--浏览器窗口的标题--&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    Hello,world!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-comment">&lt;!--主体内容，展示给用户的--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><blockquote><h2 id="其他写在body里面的处理文本的标签："><a href="#其他写在body里面的处理文本的标签：" class="headerlink" title="其他写在body里面的处理文本的标签："></a>其他写在body里面的处理文本的标签：</h2></blockquote><p><strong>1、<code>&lt;p&gt;&lt;/p&gt;</code></strong>  段落成段展示:<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>燕子去了，有再来的时候；杨柳枯了，有再青的时候；桃花谢了,有再开的时候。但是，聪明的，你告诉我，我们的日子为什么一去不复返呢？——是有人偷了他们罢：那是谁？又藏在何处呢？是他们自己逃走了罢——如今又到了哪里呢？<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我不知道他们给了我多少日子，但我的手确乎是渐渐空虚了。在默默里算着，八千多日子已经从我手中溜去，像针尖上一滴水滴在大海里，我的日子滴在时间的流里，没有声音，也没有影子。我不禁头涔涔而泪潸潸了。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><br><strong>2、<code>&lt;h1&gt;&lt;h2&gt;&lt;h3&gt;&lt;h4&gt;&lt;h5&gt;&lt;h6&gt;</code></strong>  标题标签，<code>&lt;h1&gt;</code>     标签最小，<code>&lt;h6&gt;</code>  标签字体最小   </p><p><strong>3、<code>&lt;b&gt;&lt;/b&gt;</code></strong>   字体粗体    </p><p><strong>4、<code>&lt;i&gt;&lt;/i&gt;</code></strong>   字体斜体  </p><p><strong>5、<code>&lt;sup&gt;&lt;/sup&gt;</code></strong> 上标字符 —&gt; <code>E = mc&lt;sup&gt;2&lt;/sup&gt;</code> —&gt;  <script type="math/tex">E = mc^2</script>    </p><p><strong>6、<code>&lt;sub&gt;&lt;/sub&gt;</code></strong>  下标字符   </p><p><strong>7、<code>&lt;br /&gt;</code></strong> 换行标签  </p><p><strong>8、<code>&lt;hr/&gt;</code></strong> 插入一条水平线  —&gt;(如下所示)   </p><hr><p><strong>9、<code>&lt;strong&gt;&lt;/strong&gt;</code></strong> 粗体强调         </p><p><strong>10、<code>&lt;em&gt;&lt;/em&gt;</code></strong> 斜体    </p><p><strong>11、<code>&lt;del&gt;&lt;/del&gt;</code></strong> 中划线标签 —&gt;  <del>￥100</del></p><h2 id="使用编辑器"><a href="#使用编辑器" class="headerlink" title="使用编辑器"></a>使用编辑器</h2><p>建议使用VS code,创建html文件，用编辑器打开，用（ ! 回车） 可以一键生成基本页面标签内容。编辑后，用浏览器打开html。</p><h2 id="重要且常用的标签"><a href="#重要且常用的标签" class="headerlink" title="重要且常用的标签"></a>重要且常用的标签</h2><h3 id="1、ul-li无序列表"><a href="#1、ul-li无序列表" class="headerlink" title="1、ul  li无序列表"></a>1、ul  li无序列表</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-comment">&lt;!--  经常利用CSS中设置list-style : none;将无序列表前面的小黑点去掉,    </span><span class="hljs-comment">或通过其他属性值设置前面样式--&gt;</span></code></pre><h3 id="2、img图片标签"><a href="#2、img图片标签" class="headerlink" title="2、img图片标签"></a>2、img图片标签</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">stc</span>=<span class="hljs-string">" "</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">" "</span>  <span class="hljs-attr">title</span>=<span class="hljs-string">" "</span>&gt;</span></code></pre><p>title 全局属性，<code>&lt;element title=&quot;value&quot;&gt;</code> 常与需要信息提示的元素一同使用，当鼠标移到元素上时显示一段提示文本<br>|    属性    |                            值表示                            |<br>|————| ————————————————————————————— |<br>|  src=’  ‘  | 1、网上的url<br/>2、本地的绝对地址  <br/>3、本地的相对地址 |<br>|  alt=’  ‘  |               记述图片，地址错误时展示文字信息               |<br>| title=’  ‘ |            图片提示符，当鼠标移上去时显示图片信息            |</p><h3 id="3、a标签-lt-a-gt-lt-a-gt"><a href="#3、a标签-lt-a-gt-lt-a-gt" class="headerlink" title="3、a标签 &lt;a&gt;&lt;/a&gt;"></a>3、a标签 <code>&lt;a&gt;&lt;/a&gt;</code></h3><p>1、放地址，实现超链接<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">" "</span>  <span class="hljs-attr">target</span>=<span class="hljs-string">"blank"</span>&gt;</span>www.baidu.com<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><br>2、可做锚点，回到顶部，从目录选择到内容<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'demo2'</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"position:absolute;top:3500px;width:100px;height:100px;background-color: green;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#demo2"</span>&gt;</span>find demo2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><br>3、打电话发邮件<br><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"tel:13612345666"</span>&gt;</span>博主电话<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><br>4、协议限定等（发起提示框等功能）</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">'https://www.baidu.com'</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">"return confirm('确定跳转?')"</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><div class="table-container"><table><thead><tr><th>属性</th><th>值的描述</th></tr></thead><tbody><tr><td>href=” “（超文本引用）</td><td>属性值可为<strong>链接、电话号码、邮件地址、某个锚点id值 、协议限定符</strong>等</td></tr><tr><td>target=”blank”</td><td>表示另一个标签页面跳转打开网页操作</td></tr></tbody></table></div><h3 id="4、form表单"><a href="#4、form表单" class="headerlink" title="4、form表单"></a>4、form表单</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">" "</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"get/post"</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><p>表格标签，发送数据的功能<br>组成元素：method=”get/post” （数据发送方式)<br>action=”  “(发送给谁/发送上传数据)<br><b>发送数据要一定有两个点： 数据名name跟数据值value</b></p><h4 id="组件："><a href="#组件：" class="headerlink" title="组件："></a>组件：</h4><h5 id="（一）-lt-input-gt-输入框-供用户输入-提交按钮"><a href="#（一）-lt-input-gt-输入框-供用户输入-提交按钮" class="headerlink" title="（一）&lt;input&gt; 输入框;  供用户输入, 提交按钮"></a>（一）<code>&lt;input&gt;</code> 输入框;  供用户输入, 提交按钮</h5><pre><code class="hljs html">Username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> &gt;</span> <span class="hljs-comment">&lt;!--文本框--&gt;</span>Password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span>&gt;</span><span class="hljs-comment">&lt;!--密码框--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">'submit'</span> <span class="hljs-attr">name</span>=<span class="hljs-string">'subscribe'</span> <span class="hljs-attr">value</span> = <span class="hljs-string">'Subscribe'</span>&gt;</span> <span class="hljs-comment">&lt;!--提交框--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"fruit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Apple"</span>&gt;</span> I have a apple<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"fruit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Orange"</span> <span class="hljs-attr">checked</span>&gt;</span> I have a Orange</code></pre><div class="table-container"><table><thead><tr><th>属性</th><th>值的描述</th></tr></thead><tbody><tr><td>type（类型）=” “</td><td>1、text(文本框）<br>2、password（密码框）<br>3、summit（提交框）<br/> 4、 radio(单选框)<br/>5、 checkbox(多选框)<br>6、 file(文件上传按钮)</td></tr><tr><td>name=”  “</td><td>数据名</td></tr><tr><td>value=”  “</td><td>数据值</td></tr><tr><td>checked=” checked”<br>属性名属性值一样是，可省略属性值</td><td>已选择框，表示默认选项</td></tr><tr><td>onfocus=” “</td><td>鼠标点击时发生的变化，对焦<br>&lt;<em>input type=”text” onfocus=”</em>SomeJavaScriptCode<em>“&gt;<br>**SomeJavaScriptCode</em> : 规定该事件发生时执行的JavaScript。</td></tr><tr><td>onblur=” “</td><td>鼠标点击外界时发生的变化，失去焦点<br>&lt;<em>input type=”text” onblur=”</em>SomeJavaScriptCode<em>“&gt;<br/>**SomeJavaScriptCode</em> : 规定该事件发生时执行的JavaScript。</td></tr></tbody></table></div><h5 id="（二）-lt-select-gt-lt-select-gt-滑动多选项"><a href="#（二）-lt-select-gt-lt-select-gt-滑动多选项" class="headerlink" title="（二） &lt;select&gt;&lt;/select&gt;  滑动多选项"></a>（二） <code>&lt;select&gt;&lt;/select&gt;</code>  滑动多选项</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1 <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>12 <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>123 <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1234 <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>12345 <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><h5 id="（三）-lt-button-gt-按钮"><a href="#（三）-lt-button-gt-按钮" class="headerlink" title="（三）&lt;button&gt;按钮"></a>（三）<code>&lt;button&gt;</code>按钮</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>这是一个按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></code></pre><h3 id="5、div与span"><a href="#5、div与span" class="headerlink" title="5、div与span"></a>5、div与span</h3><p>div跟span都是没有特性的标签，但是几乎所有元素都会创建div或者span标签，作为一个容器处理。<br>区别：div将文本和元素集中在一个块级元素中，故div标签为一个块级元素标签<br>span标签将文本和元素集中在一个内联元素中，故span标签标签为一个内联元素标签<br><em>ps:<strong>块级元素跟内联元素区别会在CSS文档中介绍</strong></em></p><h2 id="id特性跟class特性"><a href="#id特性跟class特性" class="headerlink" title="id特性跟class特性"></a>id特性跟class特性</h2><p>每个HTML元素都可以附带一个class属性，class属性可以有多个值<br>每个HTML元素也都可以附带一个id属性，id属性有且只能有一个值，表示该元素的唯一标识。<br>两者的作用是为了方便利用css或javascript中选择并且操作标签</p><div class="table-container"><table><thead><tr><th>id属性</th><th>class属性</th></tr></thead><tbody><tr><td>id属性有且只能有一个值，该元素的唯一标识</td><td>class属性可以有多个值</td></tr><tr><td><code>&lt;div id = &quot;only&quot;&gt;</code></td><td><code>&lt;div class = &quot;demo1 demo2&quot;&gt;</code></td></tr></tbody></table></div>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>firstblog</title>
    <link href="/2020/05/28/firstblog/"/>
    <url>/2020/05/28/firstblog/</url>
    
    <content type="html"><![CDATA[<h1 id="Welcome-my-blog"><a href="#Welcome-my-blog" class="headerlink" title="Welcome my blog"></a>Welcome my blog</h1><h2 id="记录一下第一次创建博客，这是深夜凌晨3点，我这就去睡觉了。"><a href="#记录一下第一次创建博客，这是深夜凌晨3点，我这就去睡觉了。" class="headerlink" title="记录一下第一次创建博客，这是深夜凌晨3点，我这就去睡觉了。"></a>记录一下第一次创建博客，这是深夜凌晨3点，我这就去睡觉了。</h2>]]></content>
    
    
    
    <tags>
      
      <tag>随手一记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
